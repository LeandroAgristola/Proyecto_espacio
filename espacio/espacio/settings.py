"""
Django settings for espacio project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
from pathlib import Path
from django.contrib.messages import constants as messages
from celery.schedules import crontab
import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'django-insecure-7318ciiy)2mf*@!dd-^0qk&c!a7t!i_jlz_)$q7&$rr9(=m1k+')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DJANGO_DEBUG', 'True') == 'True'

ALLOWED_HOSTS = os.environ.get('DJANGO_ALLOWED_HOSTS', '*').split(',')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',  
    'django.contrib.staticfiles',
    'crispy_forms',
    'django_bootstrap5',
    'crispy_bootstrap5',
    'webPublic',
    'management',
    'empleados',
    'eventos',
    'planes',
    'clientes',
    'configuracion',
    'calendario',
    'storages', 
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
]

ROOT_URLCONF = 'espacio.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR.parent, 'espacio', 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'espacio.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': dj_database_url.config(
        default=f'sqlite:///{BASE_DIR / "db.sqlite3"}', 
        conn_max_age=600 # Opcional: Para mantener conexiones vivas
    )
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'es-eu'

USE_TZ = True

TIME_ZONE = 'America/Argentina/Buenos_Aires'  # Ajusta zona horaria

USE_I18N = True

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5" 
CRISPY_TEMPLATE_PACK = "bootstrap5"

APPEND_SLASH = True

MESSAGE_TAGS = {
    messages.ERROR: 'danger', 
    messages.SUCCESS: 'success',
    messages.INFO: 'info',
    messages.WARNING: 'warning',
}

# --- CONFIGURACIÓN DE ARCHIVOS ESTÁTICOS Y DE MEDIA CON GOOGLE CLOUD STORAGE ---
# Asegúrate de haber instalado `django-storages` y `google-cloud-storage`

GS_BUCKET_NAME = os.environ.get('GS_BUCKET_NAME') # Nombre de tu bucket de Cloud Storage
GS_MEDIA_LOCATION = 'media' # Carpeta dentro del bucket para archivos de media
GS_STATIC_LOCATION = 'static' # Carpeta dentro del bucket para archivos estáticos

if not DEBUG: # En producción, usa Cloud Storage para estáticos y media
    DEFAULT_FILE_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'
    STATICFILES_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'

    GS_PROJECT_ID = os.environ.get('GS_PROJECT_ID') # Tu ID de proyecto de GCP
    GS_AUTO_CREATE_BUCKET = False # Opcional: No crear el bucket automáticamente
    GS_QUERYSTRING_AUTH = True # Opcional: Firma las URLs temporalmente para acceso privado

    # URLs base para los archivos en Cloud Storage
    STATIC_URL = f'https://storage.googleapis.com/{GS_BUCKET_NAME}/{GS_STATIC_LOCATION}/'
    MEDIA_URL = f'https://storage.googleapis.com/{GS_BUCKET_NAME}/{GS_MEDIA_LOCATION}/'
else: # En desarrollo, usa el sistema de archivos local
    STATIC_URL = '/static/' 
    STATICFILES_DIRS = [
        os.path.join(BASE_DIR.parent, 'static'), 
    ]
    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles') 

    MEDIA_URL = '/media/' 
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# CSRF_TRUSTED_ORIGINS y CORS para Cloud Run
# Cuando estés en producción, tu dominio de Cloud Run y cualquier dominio personalizado
# que uses deben estar aquí.
CSRF_TRUSTED_ORIGINS = os.environ.get('CSRF_TRUSTED_ORIGINS', 'https://localhost:8000,http://localhost:8000').split(',')
CSRF_COOKIE_SECURE = os.environ.get('DJANGO_CSRF_COOKIE_SECURE', 'False') == 'True'
CSRF_COOKIE_HTTPONLY = os.environ.get('DJANGO_CSRF_COOKIE_HTTPONLY', 'False') == 'True'

EMAIL_BACKEND = os.environ.get('DJANGO_EMAIL_BACKEND', 'django.core.mail.backends.console.EmailBackend') # [cite: 1]

# Configuración de Celery (si la usas en producción)
# BROKER_URL = os.environ.get('CELERY_BROKER_URL')
# CELERY_RESULT_BACKEND = os.environ.get('CELERY_RESULT_BACKEND')
# CELERY_ACCEPT_CONTENT = ['json']
# CELERY_TASK_SERIALIZER = 'json'
# CELERY_RESULT_SERIALIZER = 'json'
# CELERY_TIMEZONE = 'America/Argentina/Buenos_Aires'
# CELERY_BEAT_SCHEDULE = {
#    'example-task': {
#        'task': 'your_app.tasks.your_task_name',
#        'schedule': crontab(minute='*/5'), # Ejecutar cada 5 minutos
#    },
# }